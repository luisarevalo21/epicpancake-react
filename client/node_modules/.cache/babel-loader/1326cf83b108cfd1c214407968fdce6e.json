{"ast":null,"code":"var _jsxFileName = \"/Users/luise.arevalo/Desktop/React/epicpancake-react/client/src/containers/Gym/Gym.js\";\nimport React, { Component } from \"react\";\nimport Tabletop from \"tabletop\";\nimport classes from \"./Gym.module.css\";\nimport ListBuilder from \"../../components/ListBuilder/ListBuilder\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport Modal from \"../Modal/Modal\";\nimport ValorLogo from \"../../assets/images/Team_Valor.png\";\nimport Logo from \"../../components/Logo/Logo\";\nimport MysticLogo from \"../../assets/images/Team_Mystic.png\";\nimport InstinctLogo from \"../../assets/images/Team_Instinct.png\";\nimport Button from \"../../components/Button/Button\";\nimport copy from \"copy-to-clipboard\";\nlet myFinalString = \"\";\nlet myString = \"\";\n\nclass Gym extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // id: this.props.match.params.gymId,\n      data: [],\n      date: \"\",\n      time: \"\",\n      instinctList: [],\n      valorList: [],\n      mysticList: [],\n      loading: true\n    };\n\n    this.handleClick = () => {\n      // copyToClicpboard = e => {\n      this.refs.input.select();\n      document.execCommand(\"copy\");\n      return false;\n    };\n\n    this.copyString = dataFromChild => {\n      console.log(\"the data from child is\", dataFromChild);\n\n      if (dataFromChild) {\n        console.log(\"the data from the child is\", dataFromChild);\n        let copy = \"\";\n        copy += dataFromChild + \" \\n\";\n        console.log(\"the final copy is\", copy);\n        myFinalString += copy;\n        console.log(\"MY FINAL STRING IS\", myFinalString);\n        myString = myFinalString;\n        copy(this.state.copyString, {\n          debug: true,\n          message: null\n        }); // this.setState({ copyString: copy });\n      } // console.log(\"the data from the child is\", copy);\n      // return copy;\n      // this.setState({ copyString: copy });\n      //setstate afterwards\n\n    };\n\n    this.showInfo = (data, tabletop) => {\n      const array = tabletop.sheets(this.props.match.params.gymId).toArray(); // console.log(\"the array is\", array);\n\n      let copyString = \"\";\n\n      if (array.length !== 0) {\n        myFinalString += this.props.match.params.gymId + \" \\n\"; // copyString += this.props.match.params.gymId + \"\\n\";\n\n        console.log(\"the id is\", this.props.match.params.gymId); // const array = tabletop.sheets(this.props.match.params.gymId).toArray();\n\n        const date = array[0][4];\n        myFinalString += date + \" \\n\";\n        const time = array[0][5];\n        myFinalString += time + \" \\n\"; // console.log(\"the copy string is\", copyString);\n\n        const instinctList = array.filter(element => element[2] === \"Instinct\");\n        const valorList = array.filter(element => element[2] === \"Valor\");\n        const mysticList = array.filter(element => element[2] === \"Mystic\");\n        console.log(\"MY FINAL STRING\", myFinalString); // console.log(\"the valor list is\", valorList);\n        // console.log(array[0][0]);\n\n        this.setState({\n          data: array,\n          date,\n          time,\n          instinctList,\n          valorList,\n          mysticList,\n          loading: false\n        });\n      } else {\n        this.setState({\n          loading: false,\n          copyString: copyString\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"the id is\", this.props.match.params.gymId);\n    Tabletop.init({\n      key: \"https://docs.google.com/spreadsheets/d/15mSqg-uGZTmQBEu_hqvNzaCiSPGi8JapuV46WmsDRvM/edit?usp=sharing\",\n      callback: this.showInfo,\n      simpleSheet: true\n    });\n  }\n\n  render() {\n    // console.log(\"the copystring is\", myFinalString);\n    // this.copyString();\n    let gyms = React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classes.List,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: classes.Gym_date_time,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.state.date), React.createElement(\"span\", {\n      className: classes.Gym_date_time,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.state.time), React.createElement(\"div\", {\n      className: [classes.List, classes.InstinctList].join(\" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      src: InstinctLogo,\n      type: \"team\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }), React.createElement(ListBuilder, {\n      list: this.state.instinctList,\n      team: \"Instinct\" // text={this.state.copyString}\n      ,\n      test: this.copyString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: [classes.List, classes.MysticList].join(\" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      src: MysticLogo,\n      type: \"team\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), React.createElement(ListBuilder, {\n      list: this.state.mysticList,\n      team: \"Mystic\" // text={this.state.copyString}\n      ,\n      test: this.copyString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: [classes.List, classes.ValorList].join(\" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      src: ValorLogo,\n      type: \"team\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), React.createElement(ListBuilder, {\n      list: this.state.valorList,\n      team: \"Valor\" // text={this.state.copyString}\n      ,\n      test: this.copyString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }))));\n\n    if (this.state.loading) {\n      //change to just a spinner if need be\n      gyms = React.createElement(Modal, {\n        show: this.state.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      });\n    } // console.log(\"the id is\", this.state.data[0]);\n    // let date = this.state.data[0];\n    // this.state.data.map(element => {\n    //   date = element[4];\n    //   time = element[5];\n    // });\n\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: classes.Gym,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, this.props.match.params.gymId), React.createElement(\"input\", {\n      className: classes.Raidlist,\n      ref: \"input\",\n      type: \"text\",\n      value: myString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }), gyms, React.createElement(Button, {\n      clicked: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, \"Copy\"));\n  }\n\n}\n\nexport default Gym;","map":{"version":3,"sources":["/Users/luise.arevalo/Desktop/React/epicpancake-react/client/src/containers/Gym/Gym.js"],"names":["React","Component","Tabletop","classes","ListBuilder","Spinner","Modal","ValorLogo","Logo","MysticLogo","InstinctLogo","Button","copy","myFinalString","myString","Gym","state","data","date","time","instinctList","valorList","mysticList","loading","handleClick","refs","input","select","document","execCommand","copyString","dataFromChild","console","log","debug","message","showInfo","tabletop","array","sheets","props","match","params","gymId","toArray","length","filter","element","setState","componentDidMount","init","key","callback","simpleSheet","render","gyms","List","Gym_date_time","InstinctList","join","MysticList","ValorList","Raidlist"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Tabletop from \"tabletop\";\nimport classes from \"./Gym.module.css\";\nimport ListBuilder from \"../../components/ListBuilder/ListBuilder\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport Modal from \"../Modal/Modal\";\nimport ValorLogo from \"../../assets/images/Team_Valor.png\";\nimport Logo from \"../../components/Logo/Logo\";\nimport MysticLogo from \"../../assets/images/Team_Mystic.png\";\nimport InstinctLogo from \"../../assets/images/Team_Instinct.png\";\nimport Button from \"../../components/Button/Button\";\nimport copy from \"copy-to-clipboard\";\n\nlet myFinalString = \"\";\nlet myString = \"\";\n\nclass Gym extends Component {\n  state = {\n    // id: this.props.match.params.gymId,\n    data: [],\n    date: \"\",\n    time: \"\",\n    instinctList: [],\n    valorList: [],\n    mysticList: [],\n    loading: true\n  };\n\n  componentDidMount() {\n    console.log(\"the id is\", this.props.match.params.gymId);\n\n    Tabletop.init({\n      key:\n        \"https://docs.google.com/spreadsheets/d/15mSqg-uGZTmQBEu_hqvNzaCiSPGi8JapuV46WmsDRvM/edit?usp=sharing\",\n      callback: this.showInfo,\n      simpleSheet: true\n    });\n  }\n\n  handleClick = () => {\n    // copyToClicpboard = e => {\n    this.refs.input.select();\n    document.execCommand(\"copy\");\n    return false;\n  };\n  copyString = dataFromChild => {\n    console.log(\"the data from child is\", dataFromChild);\n    if (dataFromChild) {\n      console.log(\"the data from the child is\", dataFromChild);\n      let copy = \"\";\n\n      copy += dataFromChild + \" \\n\";\n      console.log(\"the final copy is\", copy);\n      myFinalString += copy;\n      console.log(\"MY FINAL STRING IS\", myFinalString);\n      myString = myFinalString;\n\n      copy(this.state.copyString, {\n        debug: true,\n        message: null\n      });\n      // this.setState({ copyString: copy });\n    }\n    // console.log(\"the data from the child is\", copy);\n    // return copy;\n    // this.setState({ copyString: copy });\n\n    //setstate afterwards\n  };\n  showInfo = (data, tabletop) => {\n    const array = tabletop.sheets(this.props.match.params.gymId).toArray();\n    // console.log(\"the array is\", array);\n    let copyString = \"\";\n    if (array.length !== 0) {\n      myFinalString += this.props.match.params.gymId + \" \\n\";\n      // copyString += this.props.match.params.gymId + \"\\n\";\n      console.log(\"the id is\", this.props.match.params.gymId);\n      // const array = tabletop.sheets(this.props.match.params.gymId).toArray();\n      const date = array[0][4];\n      myFinalString += date + \" \\n\";\n      const time = array[0][5];\n      myFinalString += time + \" \\n\";\n      // console.log(\"the copy string is\", copyString);\n      const instinctList = array.filter(element => element[2] === \"Instinct\");\n      const valorList = array.filter(element => element[2] === \"Valor\");\n      const mysticList = array.filter(element => element[2] === \"Mystic\");\n      console.log(\"MY FINAL STRING\", myFinalString);\n\n      // console.log(\"the valor list is\", valorList);\n      // console.log(array[0][0]);\n      this.setState({\n        data: array,\n        date,\n        time,\n        instinctList,\n        valorList,\n        mysticList,\n        loading: false\n      });\n    } else {\n      this.setState({ loading: false, copyString: copyString });\n    }\n  };\n\n  render() {\n    // console.log(\"the copystring is\", myFinalString);\n    // this.copyString();\n    let gyms = (\n      <>\n        {/* <h1 className={classes.Gym}>{this.props.match.params.gymId}</h1> */}\n        <div className={classes.List}>\n          <span className={classes.Gym_date_time}>{this.state.date}</span>\n          <span className={classes.Gym_date_time}>{this.state.time}</span>\n          <div className={[classes.List, classes.InstinctList].join(\" \")}>\n            <Logo src={InstinctLogo} type=\"team\" />\n            <ListBuilder\n              list={this.state.instinctList}\n              team=\"Instinct\"\n              // text={this.state.copyString}\n              test={this.copyString}\n            />\n          </div>\n          <div className={[classes.List, classes.MysticList].join(\" \")}>\n            <Logo src={MysticLogo} type=\"team\" />\n            <ListBuilder\n              list={this.state.mysticList}\n              team=\"Mystic\"\n              // text={this.state.copyString}\n              test={this.copyString}\n            />\n          </div>\n          <div className={[classes.List, classes.ValorList].join(\" \")}>\n            <Logo src={ValorLogo} type=\"team\" />\n            <ListBuilder\n              list={this.state.valorList}\n              team=\"Valor\"\n              // text={this.state.copyString}\n              test={this.copyString}\n            />\n          </div>\n        </div>\n      </>\n    );\n    if (this.state.loading) {\n      //change to just a spinner if need be\n      gyms = <Modal show={this.state.loading} />;\n    }\n    // console.log(\"the id is\", this.state.data[0]);\n    // let date = this.state.data[0];\n    // this.state.data.map(element => {\n    //   date = element[4];\n    //   time = element[5];\n    // });\n    return (\n      <div className=\"container\">\n        <h1 className={classes.Gym}>{this.props.match.params.gymId}</h1>\n        <input\n          className={classes.Raidlist}\n          ref=\"input\"\n          type=\"text\"\n          value={myString}\n        />\n        {gyms}\n\n        <Button clicked={this.handleClick}>Copy</Button>\n      </div>\n    );\n  }\n}\n\nexport default Gym;\n"]},"metadata":{},"sourceType":"module"}