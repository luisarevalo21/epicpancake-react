{"ast":null,"code":"import _objectSpread from \"/Users/luise.arevalo/Desktop/React/epicpancake-react/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/luise.arevalo/Desktop/React/epicpancake-react/client/src/containers/Gym/Gym.js\";\nimport React, { Component } from \"react\";\nimport Tabletop from \"tabletop\";\nimport classes from \"./Gym.module.css\";\nimport ListBuilder from \"../../components/ListBuilder/ListBuilder\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport Modal from \"../Modal/Modal\";\nimport ValorLogo from \"../../assets/images/Team_Valor.png\";\nimport Logo from \"../../components/Logo/Logo\";\nimport MysticLogo from \"../../assets/images/Team_Mystic.png\";\nimport InstinctLogo from \"../../assets/images/Team_Instinct.png\";\nimport Button from \"../../components/Button/Button\";\nimport copy from \"copy-to-clipboard\";\nlet myFinalString = \"\";\n\nclass Gym extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      // id: this.props.match.params.gymId,\n      data: [],\n      date: \"\",\n      time: \"\",\n      instinctList: [],\n      valorList: [],\n      mysticList: [],\n      loading: true,\n      copyString: \"\"\n    };\n\n    this.handleClick = () => {\n      // copyToClicpboard = e => {\n      this.refs.input.select();\n      document.execCommand(\"copy\");\n      return false;\n    };\n\n    this.copyString = dataFromChild => {\n      console.log(\"the data from child is\", dataFromChild);\n      myFinalString += dataFromChild;\n      console.log(\"my final string\", myFinalString); // console.log(\"the data from child is\", dataFromChild);\n      // console.log(\"copystate.copystring\", copyState.copyString);\n      // // let copyString = \"\";\n      // // if (prevState !== copyState) {\n      // console.log(\"inside the if\");\n      // console.log(\"the data from the child is\", dataFromChild);\n      // copyState.copyString += dataFromChild;\n      // console.log(\"copystate\", copyState.copyString);\n      // copyString += dataFromChild + \" \\n\";\n      // myFinalString = copyString;\n      // this.setState({ copyString: copyState.copyString });\n      // console.log(\"the copy string before return is\", copyString);\n      // let copy = \"\";\n      // myFinalString += copyString;\n      // return copyString;\n      // copy += dataFromChild + \" \\n\";\n      // console.log(\"the final copy is\", copy);\n      // console.log(\"MY FINAL STRING IS\", copyString);\n      // this.setState({ copyString: myFinalString });\n      // myString = myFinalString;\n      // console.log(\"MY STRING\", myString);\n      // this.setState({ copyString: copy });\n      //}\n      // console.log(\"the data from the child is\", copy);\n      // return copy;\n      // this.setState({ copyString: copy });\n      //setstate afterwards\n    };\n\n    this.showInfo = (data, tabletop) => {\n      const array = tabletop.sheets(this.props.match.params.gymId).toArray(); // console.log(\"the array is\", array);\n\n      let copyString = \"\";\n\n      if (array.length !== 0) {\n        copyString += this.props.match.params.gymId + \" \\n\"; // copyString += this.props.match.params.gymId + \"\\n\";\n        // console.log(\"the id is\", this.props.match.params.gymId);\n        // const array = tabletop.sheets(this.props.match.params.gymId).toArray();\n\n        const date = array[0][4];\n        copyString += date + \" \\n\";\n        const time = array[0][5];\n        copyString += time + \" \\n\"; // console.log(\"the copy string is\", copyString);\n\n        const instinctList = array.filter(element => element[2] === \"Instinct\");\n        const mysticList = array.filter(element => element[2] === \"Mystic\");\n        const valorList = array.filter(element => element[2] === \"Valor\"); // console.log(\"MY FINAL STRING\", copyString);\n        // console.log(\"the valor list is\", valorList);\n        // console.log(array[0][0]);\n\n        this.setState({\n          data: array,\n          date,\n          time,\n          instinctList,\n          valorList,\n          mysticList,\n          loading: false,\n          //change final string\n          copyString: copyString\n        });\n      } else {\n        this.setState({\n          loading: false,\n          copyString: copyString\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    console.log(\"the id is\", this.props.match.params.gymId);\n    console.log(\"componentdid mount\");\n    Tabletop.init({\n      key: \"https://docs.google.com/spreadsheets/d/15mSqg-uGZTmQBEu_hqvNzaCiSPGi8JapuV46WmsDRvM/edit?usp=sharing\",\n      callback: this.showInfo,\n      simpleSheet: true\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const copy = _objectSpread({}, this.state);\n\n    console.log(\"previous props is\", prevState);\n    console.log(\"the current state is\", this.state); // if (prevProps.copy !== this.props.data) {\n    //   this.chart = c3.load({\n    //     data: this.props.data\n    //   });\n\n    console.log(\"final string in componenet did update\", myFinalString); // const copyState = { ...this.state };\n    // console.log(\"this.copystring\", this.copyString());\n    // console.log(\n    //   \"the copy string in compondent did update is\",\n    //   copyState.copyString\n    // );\n    // // console.log(\"the current copy string is\", this.state.copyString);\n    // // console.log(\"prev props are\", prevState);\n    // if (prevState.copyString !== this.state.copyString) {\n    //   console.log(\"isnide the if\");\n    //   // console.log(\"this.state.copystring\", this.state.copyString);\n    //   // this.setState({ copyString: copyString });\n    // }\n  }\n\n  render() {\n    console.log(\"my final string ins render \", myFinalString); // console.log(\"the copystring is\", myFinalString);\n    // this.copyString();\n\n    let gyms = React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      className: classes.List,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: classes.Gym_date_time,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.state.date), React.createElement(\"span\", {\n      className: classes.Gym_date_time,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, this.state.time), React.createElement(\"div\", {\n      className: [classes.List, classes.InstinctList].join(\" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      src: InstinctLogo,\n      type: \"team\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }), React.createElement(ListBuilder, {\n      list: this.state.instinctList,\n      team: \"Instinct\" // text={this.state.copyString}\n      ,\n      test: this.copyString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: [classes.List, classes.MysticList].join(\" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      src: MysticLogo,\n      type: \"team\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }), React.createElement(ListBuilder, {\n      list: this.state.mysticList,\n      team: \"Mystic\" // text={this.state.copyString}\n      ,\n      test: this.copyString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: [classes.List, classes.ValorList].join(\" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, React.createElement(Logo, {\n      src: ValorLogo,\n      type: \"team\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }), React.createElement(ListBuilder, {\n      list: this.state.valorList,\n      team: \"Valor\" // text={this.state.copyString}\n      ,\n      test: this.copyString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }))));\n\n    if (this.state.loading) {\n      //change to just a spinner if need be\n      gyms = React.createElement(Modal, {\n        show: this.state.loading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      });\n    } // console.log(\"the id is\", this.state.data[0]);\n    // let date = this.state.data[0];\n    // this.state.data.map(element => {\n    //   date = element[4];\n    //   time = element[5];\n    // });\n\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: classes.Gym,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, this.props.match.params.gymId), React.createElement(\"input\", {\n      className: classes.Raidlist,\n      ref: \"input\",\n      type: \"text\",\n      value: myFinalString,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), gyms, React.createElement(Button, {\n      clicked: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }, \"Copy\"));\n  }\n\n}\n\nexport default Gym;","map":{"version":3,"sources":["/Users/luise.arevalo/Desktop/React/epicpancake-react/client/src/containers/Gym/Gym.js"],"names":["React","Component","Tabletop","classes","ListBuilder","Spinner","Modal","ValorLogo","Logo","MysticLogo","InstinctLogo","Button","copy","myFinalString","Gym","state","data","date","time","instinctList","valorList","mysticList","loading","copyString","handleClick","refs","input","select","document","execCommand","dataFromChild","console","log","showInfo","tabletop","array","sheets","props","match","params","gymId","toArray","length","filter","element","setState","componentDidMount","init","key","callback","simpleSheet","componentDidUpdate","prevProps","prevState","render","gyms","List","Gym_date_time","InstinctList","join","MysticList","ValorList","Raidlist"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Tabletop from \"tabletop\";\nimport classes from \"./Gym.module.css\";\nimport ListBuilder from \"../../components/ListBuilder/ListBuilder\";\nimport Spinner from \"../../components/Spinner/Spinner\";\nimport Modal from \"../Modal/Modal\";\nimport ValorLogo from \"../../assets/images/Team_Valor.png\";\nimport Logo from \"../../components/Logo/Logo\";\nimport MysticLogo from \"../../assets/images/Team_Mystic.png\";\nimport InstinctLogo from \"../../assets/images/Team_Instinct.png\";\nimport Button from \"../../components/Button/Button\";\nimport copy from \"copy-to-clipboard\";\n\nlet myFinalString = \"\";\n\nclass Gym extends Component {\n  state = {\n    // id: this.props.match.params.gymId,\n    data: [],\n    date: \"\",\n    time: \"\",\n    instinctList: [],\n    valorList: [],\n    mysticList: [],\n    loading: true,\n    copyString: \"\"\n  };\n\n  componentDidMount() {\n    console.log(\"the id is\", this.props.match.params.gymId);\n    console.log(\"componentdid mount\");\n    Tabletop.init({\n      key:\n        \"https://docs.google.com/spreadsheets/d/15mSqg-uGZTmQBEu_hqvNzaCiSPGi8JapuV46WmsDRvM/edit?usp=sharing\",\n      callback: this.showInfo,\n      simpleSheet: true\n    });\n  }\n\n  handleClick = () => {\n    // copyToClicpboard = e => {\n    this.refs.input.select();\n    document.execCommand(\"copy\");\n    return false;\n  };\n  componentDidUpdate(prevProps, prevState) {\n    const copy = { ...this.state };\n    console.log(\"previous props is\", prevState);\n    console.log(\"the current state is\", this.state);\n    // if (prevProps.copy !== this.props.data) {\n    //   this.chart = c3.load({\n    //     data: this.props.data\n    //   });\n    console.log(\"final string in componenet did update\", myFinalString);\n\n    // const copyState = { ...this.state };\n    // console.log(\"this.copystring\", this.copyString());\n    // console.log(\n    //   \"the copy string in compondent did update is\",\n    //   copyState.copyString\n    // );\n    // // console.log(\"the current copy string is\", this.state.copyString);\n    // // console.log(\"prev props are\", prevState);\n    // if (prevState.copyString !== this.state.copyString) {\n    //   console.log(\"isnide the if\");\n    //   // console.log(\"this.state.copystring\", this.state.copyString);\n    //   // this.setState({ copyString: copyString });\n    // }\n  }\n  copyString = dataFromChild => {\n    console.log(\"the data from child is\", dataFromChild);\n\n    myFinalString += dataFromChild;\n    console.log(\"my final string\", myFinalString);\n    // console.log(\"the data from child is\", dataFromChild);\n    // console.log(\"copystate.copystring\", copyState.copyString);\n    // // let copyString = \"\";\n    // // if (prevState !== copyState) {\n    // console.log(\"inside the if\");\n    // console.log(\"the data from the child is\", dataFromChild);\n\n    // copyState.copyString += dataFromChild;\n    // console.log(\"copystate\", copyState.copyString);\n    // copyString += dataFromChild + \" \\n\";\n    // myFinalString = copyString;\n    // this.setState({ copyString: copyState.copyString });\n\n    // console.log(\"the copy string before return is\", copyString);\n    // let copy = \"\";\n    // myFinalString += copyString;\n    // return copyString;\n    // copy += dataFromChild + \" \\n\";\n    // console.log(\"the final copy is\", copy);\n    // console.log(\"MY FINAL STRING IS\", copyString);\n    // this.setState({ copyString: myFinalString });\n    // myString = myFinalString;\n    // console.log(\"MY STRING\", myString);\n    // this.setState({ copyString: copy });\n    //}\n    // console.log(\"the data from the child is\", copy);\n    // return copy;\n    // this.setState({ copyString: copy });\n\n    //setstate afterwards\n  };\n  showInfo = (data, tabletop) => {\n    const array = tabletop.sheets(this.props.match.params.gymId).toArray();\n    // console.log(\"the array is\", array);\n    let copyString = \"\";\n    if (array.length !== 0) {\n      copyString += this.props.match.params.gymId + \" \\n\";\n      // copyString += this.props.match.params.gymId + \"\\n\";\n      // console.log(\"the id is\", this.props.match.params.gymId);\n      // const array = tabletop.sheets(this.props.match.params.gymId).toArray();\n      const date = array[0][4];\n      copyString += date + \" \\n\";\n      const time = array[0][5];\n      copyString += time + \" \\n\";\n      // console.log(\"the copy string is\", copyString);\n      const instinctList = array.filter(element => element[2] === \"Instinct\");\n      const mysticList = array.filter(element => element[2] === \"Mystic\");\n      const valorList = array.filter(element => element[2] === \"Valor\");\n      // console.log(\"MY FINAL STRING\", copyString);\n\n      // console.log(\"the valor list is\", valorList);\n      // console.log(array[0][0]);\n      this.setState({\n        data: array,\n        date,\n        time,\n        instinctList,\n        valorList,\n        mysticList,\n        loading: false,\n        //change final string\n        copyString: copyString\n      });\n    } else {\n      this.setState({ loading: false, copyString: copyString });\n    }\n  };\n\n  render() {\n    console.log(\"my final string ins render \", myFinalString);\n\n    // console.log(\"the copystring is\", myFinalString);\n    // this.copyString();\n    let gyms = (\n      <>\n        {/* <h1 className={classes.Gym}>{this.props.match.params.gymId}</h1> */}\n        <div className={classes.List}>\n          <span className={classes.Gym_date_time}>{this.state.date}</span>\n          <span className={classes.Gym_date_time}>{this.state.time}</span>\n          <div className={[classes.List, classes.InstinctList].join(\" \")}>\n            <Logo src={InstinctLogo} type=\"team\" />\n            <ListBuilder\n              list={this.state.instinctList}\n              team=\"Instinct\"\n              // text={this.state.copyString}\n              test={this.copyString}\n            />\n          </div>\n          <div className={[classes.List, classes.MysticList].join(\" \")}>\n            <Logo src={MysticLogo} type=\"team\" />\n            <ListBuilder\n              list={this.state.mysticList}\n              team=\"Mystic\"\n              // text={this.state.copyString}\n              test={this.copyString}\n            />\n          </div>\n          <div className={[classes.List, classes.ValorList].join(\" \")}>\n            <Logo src={ValorLogo} type=\"team\" />\n            <ListBuilder\n              list={this.state.valorList}\n              team=\"Valor\"\n              // text={this.state.copyString}\n              test={this.copyString}\n            />\n          </div>\n        </div>\n      </>\n    );\n    if (this.state.loading) {\n      //change to just a spinner if need be\n      gyms = <Modal show={this.state.loading} />;\n    }\n    // console.log(\"the id is\", this.state.data[0]);\n    // let date = this.state.data[0];\n    // this.state.data.map(element => {\n    //   date = element[4];\n    //   time = element[5];\n    // });\n    return (\n      <div className=\"container\">\n        <h1 className={classes.Gym}>{this.props.match.params.gymId}</h1>\n        <input\n          className={classes.Raidlist}\n          ref=\"input\"\n          type=\"text\"\n          value={myFinalString}\n        />\n        {gyms}\n\n        <Button clicked={this.handleClick}>Copy</Button>\n      </div>\n    );\n  }\n}\n\nexport default Gym;\n"]},"metadata":{},"sourceType":"module"}