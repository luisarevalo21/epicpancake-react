{"ast":null,"code":"var _jsxFileName = \"/Users/luise.arevalo/Desktop/React/epicpancake-react/src/containers/RaidBuilder/RaidBuilder.js\";\nimport React, { Component } from \"react\";\nimport Selector from \"../../components/Selector/Selector\";\nimport Button from \"../../components/Button/Button\";\nimport \"./RaidBuilder.css\";\nimport Tabletop from \"tabletop\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport copy from \"copy-to-clipboard\";\nimport ReactTooltip from \"react-tooltip\";\nimport { MDBTooltip, MDBBtn } from \"mdbreact\";\n\nclass RaidBuilder extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pokemonOptions: [],\n      gymOptions: [],\n      time: \"\",\n      selectedRaidBoss: null,\n      selectedGym: null,\n      coordiantes: null,\n      copied: false,\n      copyString: \"\",\n      show: false,\n      api: \"https://docs.google.com/spreadsheets/d/1DQUjeYhEBRemcZObEKBj-QvxISX-sVUpbY8yPadg7BY/edit?usp=sharing\"\n    };\n\n    this.showInfo = (data, tabletop) => {\n      let pokemon = tabletop.sheets(\"Pokemon List\").toArray(); // console.log(\"the pokemon are \", pokemon);\n\n      let pokemonOptions = pokemon.map(element => {\n        return {\n          label: element,\n          value: element\n        };\n      });\n      let gyms = tabletop.sheets(\"Coords\").toArray(); // console.log(\"the gys are\", gyms);\n      // let gyms = [];\n      // this.setState({ gymOptions: data });\n\n      let gymOptions = gyms.map(element => {\n        //   console.log(\"the element is \", element[0]);\n        if (element[1] === \"\") {\n          return {\n            label: element[0],\n            isDisabled: true //   style: \"bold\"\n\n          };\n        }\n\n        return {\n          value: element[0],\n          label: element[0],\n          coordinates: element[1]\n        }; //   console.log(\"element\", element[\"N/A\"]);\n        //   console.log(\"inside the map \");\n        //   if (element[\"N/A\"] === \"\") {\n        //     console.log(\"insid ethe if\");\n        //     return {\n        //       label: element[\"Blank Entry\"],\n        //       isDisabled: true\n        //       //   style: \"bold\"\n        //     };\n        //   }\n        //   gyms.push({\n        //     value: element[\"Blank Entry\"],\n        //     label: element[\"Blank Entry\"]\n        //   });\n        //   console.log(element[\"Blank Entry\"]);\n      });\n      this.setState({\n        gymOptions: gymOptions,\n        pokemonOptions: pokemonOptions\n      });\n    };\n\n    this.configuringTime = currentTime => {\n      const time = currentTime.split(\":\");\n\n      if (time[0] > 12) {\n        time[0] = time[0] - 12;\n      }\n\n      console.log(time);\n      return time[0] + \":\" + time[1];\n    };\n\n    this.handleChange = (key, selectedOption) => {\n      // console.log(\"the key is\", key);\n      // console.log(\"the seelcted option is\", selectedOption);\n      // console.log(\"the option is\", selectedOption.value[0]);\n      switch (key) {\n        case \"time\":\n          this.setState({\n            [key]: selectedOption.target.value,\n            copied: false\n          });\n          break;\n\n        case \"selectedRaidBoss\":\n          this.setState({\n            [key]: selectedOption.value[0],\n            copied: false\n          });\n          break;\n\n        case \"selectedGym\":\n          this.setState({\n            [key]: selectedOption.value,\n            coordiantes: selectedOption.coordinates,\n            copied: false\n          });\n          break;\n      } // console.log(\"inside the handle change\", selectedOption);\n      // if (key === \"time\") {\n      //   this.setState({ [key]: selectedOption.target.value });\n      // } else {\n      //   this.setState({ [key]: selectedOption });\n      // }\n\n    };\n\n    this.copyString = () => {\n      this.setState({\n        copied: true\n      });\n    };\n\n    this.handleClick = () => {\n      console.log(\"inside the click\"); // console.log(\"the selected raid boss is\", this.state.selectedGym);\n\n      const time = this.configuringTime(this.state.time);\n      console.log(\"the time is\", time);\n      let copyString = \"/newraid \";\n      copyString += this.state.selectedRaidBoss + \" at \" + this.state.selectedGym + \" \" + time + \" \" + this.state.coordiantes;\n      console.log(copyString); // const node = findDOMNode(this.ref.copied);\n      // ReactTooltip.show(node);\n      // setTimeout(() => {\n      //   console.log(\"inside the time out\");\n      //   ReactTooltip.hide(node);\n      // }, 750);\n\n      this.setState({\n        copyString: copyString,\n        copied: true\n      });\n    };\n  }\n\n  componentDidMount() {\n    Tabletop.init({\n      key: \"https://docs.google.com/spreadsheets/d/1DQUjeYhEBRemcZObEKBj-QvxISX-sVUpbY8yPadg7BY/edit?usp=sharing\",\n      callback: this.showInfo,\n      simpleSheet: true\n    });\n  }\n\n  render() {\n    console.log(\"this.state.copystring\", this.state.copied);\n    const show = this.state.show;\n\n    if (this.state.copyString) {\n      copy(this.state.copyString, {\n        debug: true,\n        message: null\n      });\n    } // const options = [\n    //   { optgroup: \"Things\", value: \"thing1\", label: \"Thing 1\" },\n    //   { optgroup: \"Things\", value: \"thing2\", label: \"Thing 2\" },\n    //   { optgroup: \"Things\", value: \"thing3\", label: \"Thing 3\" },\n    //   { optgroup: \"Stuffs\", value: \"stuff1\", label: \"Stuff 1\" },\n    //   { optgroup: \"Piles\", value: \"pile1\", label: \"Pile 1\" },\n    //   { value: \"pile1\", label: \"Pile 1\" }\n    // ];\n\n\n    return React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(Selector, {\n      label: \"Raid Boss\",\n      changed: val => this.handleChange(\"selectedRaidBoss\", val),\n      value: this.state.selectedRaidBoss,\n      options: this.state.pokemonOptions,\n      type: \"input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(Selector, {\n      label: \"Gym\",\n      changed: val => this.handleChange(\"selectedGym\", val),\n      value: this.state.selectedGym,\n      options: this.state.gymOptions,\n      type: \"input\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }), React.createElement(Selector, {\n      label: \"Start Time\",\n      changed: val => this.handleChange(\"time\", val),\n      value: this.state.time //   options={options}\n      ,\n      type: \"time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }), \"*/}\", React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }, \"click me \"), React.createElement(ReactTooltip, {\n      delayHide: 500,\n      cli: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default RaidBuilder;","map":{"version":3,"sources":["/Users/luise.arevalo/Desktop/React/epicpancake-react/src/containers/RaidBuilder/RaidBuilder.js"],"names":["React","Component","Selector","Button","Tabletop","CopyToClipboard","copy","ReactTooltip","MDBTooltip","MDBBtn","RaidBuilder","state","pokemonOptions","gymOptions","time","selectedRaidBoss","selectedGym","coordiantes","copied","copyString","show","api","showInfo","data","tabletop","pokemon","sheets","toArray","map","element","label","value","gyms","isDisabled","coordinates","setState","configuringTime","currentTime","split","console","log","handleChange","key","selectedOption","target","handleClick","componentDidMount","init","callback","simpleSheet","render","debug","message","val"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Selector from \"../../components/Selector/Selector\";\nimport Button from \"../../components/Button/Button\";\nimport \"./RaidBuilder.css\";\nimport Tabletop from \"tabletop\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport copy from \"copy-to-clipboard\";\n\nimport ReactTooltip from \"react-tooltip\";\n\nimport { MDBTooltip, MDBBtn } from \"mdbreact\";\n\nclass RaidBuilder extends Component {\n  state = {\n    pokemonOptions: [],\n    gymOptions: [],\n    time: \"\",\n    selectedRaidBoss: null,\n    selectedGym: null,\n    coordiantes: null,\n    copied: false,\n    copyString: \"\",\n    show: false,\n    api:\n      \"https://docs.google.com/spreadsheets/d/1DQUjeYhEBRemcZObEKBj-QvxISX-sVUpbY8yPadg7BY/edit?usp=sharing\"\n  };\n\n  componentDidMount() {\n    Tabletop.init({\n      key:\n        \"https://docs.google.com/spreadsheets/d/1DQUjeYhEBRemcZObEKBj-QvxISX-sVUpbY8yPadg7BY/edit?usp=sharing\",\n      callback: this.showInfo,\n      simpleSheet: true\n    });\n  }\n  showInfo = (data, tabletop) => {\n    let pokemon = tabletop.sheets(\"Pokemon List\").toArray();\n    // console.log(\"the pokemon are \", pokemon);\n    let pokemonOptions = pokemon.map(element => {\n      return { label: element, value: element };\n    });\n    let gyms = tabletop.sheets(\"Coords\").toArray();\n    // console.log(\"the gys are\", gyms);\n    // let gyms = [];\n    // this.setState({ gymOptions: data });\n    let gymOptions = gyms.map(element => {\n      //   console.log(\"the element is \", element[0]);\n\n      if (element[1] === \"\") {\n        return {\n          label: element[0],\n          isDisabled: true\n          //   style: \"bold\"\n        };\n      }\n      return {\n        value: element[0],\n        label: element[0],\n        coordinates: element[1]\n      };\n      //   console.log(\"element\", element[\"N/A\"]);\n      //   console.log(\"inside the map \");\n      //   if (element[\"N/A\"] === \"\") {\n      //     console.log(\"insid ethe if\");\n      //     return {\n      //       label: element[\"Blank Entry\"],\n      //       isDisabled: true\n      //       //   style: \"bold\"\n      //     };\n      //   }\n\n      //   gyms.push({\n      //     value: element[\"Blank Entry\"],\n      //     label: element[\"Blank Entry\"]\n      //   });\n      //   console.log(element[\"Blank Entry\"]);\n    });\n    this.setState({ gymOptions: gymOptions, pokemonOptions: pokemonOptions });\n  };\n\n  configuringTime = currentTime => {\n    const time = currentTime.split(\":\");\n    if (time[0] > 12) {\n      time[0] = time[0] - 12;\n    }\n    console.log(time);\n    return time[0] + \":\" + time[1];\n  };\n  handleChange = (key, selectedOption) => {\n    // console.log(\"the key is\", key);\n    // console.log(\"the seelcted option is\", selectedOption);\n\n    // console.log(\"the option is\", selectedOption.value[0]);\n    switch (key) {\n      case \"time\":\n        this.setState({ [key]: selectedOption.target.value, copied: false });\n        break;\n      case \"selectedRaidBoss\":\n        this.setState({ [key]: selectedOption.value[0], copied: false });\n        break;\n      case \"selectedGym\":\n        this.setState({\n          [key]: selectedOption.value,\n          coordiantes: selectedOption.coordinates,\n          copied: false\n        });\n        break;\n    }\n    // console.log(\"inside the handle change\", selectedOption);\n    // if (key === \"time\") {\n    //   this.setState({ [key]: selectedOption.target.value });\n    // } else {\n    //   this.setState({ [key]: selectedOption });\n    // }\n  };\n  copyString = () => {\n    this.setState({ copied: true });\n  };\n  handleClick = () => {\n    console.log(\"inside the click\");\n    // console.log(\"the selected raid boss is\", this.state.selectedGym);\n    const time = this.configuringTime(this.state.time);\n    console.log(\"the time is\", time);\n    let copyString = \"/newraid \";\n    copyString +=\n      this.state.selectedRaidBoss +\n      \" at \" +\n      this.state.selectedGym +\n      \" \" +\n      time +\n      \" \" +\n      this.state.coordiantes;\n    console.log(copyString);\n    // const node = findDOMNode(this.ref.copied);\n    // ReactTooltip.show(node);\n    // setTimeout(() => {\n    //   console.log(\"inside the time out\");\n    //   ReactTooltip.hide(node);\n    // }, 750);\n    this.setState({ copyString: copyString, copied: true });\n  };\n  render() {\n    console.log(\"this.state.copystring\", this.state.copied);\n    const { show } = this.state;\n\n    if (this.state.copyString) {\n      copy(this.state.copyString, {\n        debug: true,\n        message: null\n      });\n    }\n    // const options = [\n    //   { optgroup: \"Things\", value: \"thing1\", label: \"Thing 1\" },\n    //   { optgroup: \"Things\", value: \"thing2\", label: \"Thing 2\" },\n    //   { optgroup: \"Things\", value: \"thing3\", label: \"Thing 3\" },\n    //   { optgroup: \"Stuffs\", value: \"stuff1\", label: \"Stuff 1\" },\n    //   { optgroup: \"Piles\", value: \"pile1\", label: \"Pile 1\" },\n    //   { value: \"pile1\", label: \"Pile 1\" }\n    // ];\n    return (\n      <div className=\"container\">\n        <Selector\n          label=\"Raid Boss\"\n          changed={val => this.handleChange(\"selectedRaidBoss\", val)}\n          value={this.state.selectedRaidBoss}\n          options={this.state.pokemonOptions}\n          type=\"input\"\n        />\n        <Selector\n          label=\"Gym\"\n          changed={val => this.handleChange(\"selectedGym\", val)}\n          value={this.state.selectedGym}\n          options={this.state.gymOptions}\n          type=\"input\"\n        />\n        <Selector\n          label=\"Start Time\"\n          changed={val => this.handleChange(\"time\", val)}\n          value={this.state.time}\n          //   options={options}\n          type=\"time\"\n        />\n        {/* <label style={{ color: \"#6c7d8e\" }}>Start Time</label>\n        {/* <div className=\"form-group\"> */}\n        {/* <input\n          type=\"time\"\n          className=\"form-control\"\n          placeholder=\"Time\"\n          required=\"\"\n          data-fillr-id=\"1465670472\"\n          data-fillr=\"bound\"\n          autoComplete=\"off\"\n          onChange={val => this.handleChange(\"time\", val)}\n        />{\" \"} */}\n        */}\n        {/* </div> */}\n        {/* <Selector\n          label=\"Start Time\"\n          changed={this.handleChanged}\n          selected={this.state.selectedOption}\n          type=\"time\"\n        /> */}\n        {/* <MDBTooltip\n          placement=\"right\"\n          clickable={true}\n          modifiers={{ hide: { enabled: setTimeout(() => {}, 1000) } }}\n        >\n          <MDBBtn style={{ color: \"red\" }}>Tooltip on right</MDBBtn>\n          <div hidden={this.state.show}>Tooltip on right</div>\n        </MDBTooltip> */}\n        <Button>click me </Button>\n        <ReactTooltip delayHide={500} cli />\n        {/* <CopyToClipboard text={copyString}> */}\n        {/* <Button clicked={this.handleClick} ref=\"copied\" /> */}\n        {/* <ReactTooltip event=\"click\" place=\"right\" className=\"label\" /> */}\n        {/* <Overlay show={show} placement=\"right\">\n          <Tooltip>Copied</Tooltip>\n        </Overlay>\n        <OverlayTrigger\n          key={placement}\n          placement={placement}\n          overlay={\n            <Tooltip id={`tooltip-${placement}`}>\n              Tooltip on <strong>{placement}</strong>.\n            </Tooltip>\n          }\n        >\n          <Button variant=\"secondary\">Tooltip on {placement}</Button>\n        </OverlayTrigger> */}\n        {/* </CopyToClipboard> */}\n      </div>\n    );\n  }\n}\n\nexport default RaidBuilder;\n"]},"metadata":{},"sourceType":"module"}